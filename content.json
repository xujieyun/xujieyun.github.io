{"meta":{"title":"Jesse.xu","subtitle":"随便瞅瞅","description":"又挖好一个坑了","author":"许杰","url":"xujieyun.com"},"pages":[{"title":"categories","date":"2018-08-24T15:39:50.000Z","updated":"2018-08-24T15:40:19.330Z","comments":false,"path":"categories/index.html","permalink":"xujieyun.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-08-24T15:38:41.000Z","updated":"2018-08-24T15:39:33.807Z","comments":false,"path":"tags/index.html","permalink":"xujieyun.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"上传本地代码及更新代码到GitHub教程","slug":"上传本地代码及更新代码到GitHub教程","date":"2018-08-30T16:12:38.000Z","updated":"2018-08-30T16:36:25.815Z","comments":true,"path":"2018/08/31/上传本地代码及更新代码到GitHub教程/","link":"","permalink":"xujieyun.com/2018/08/31/上传本地代码及更新代码到GitHub教程/","excerpt":"","text":"上传本地代码配置信息$ git config –global user.name”xujieyun”$ git config –global user.email “203661771@qq.com“ 第一步： 去github上创建自己的Repository， 第二步： echo “# Test” &gt;&gt; README.md 第三步：建立git仓库(这个时候会出现一个master，也就是主仓库) git init 第四步：将项目的所有文件添加到仓库中 git add . 第五步： git add README.md 第六步：提交到仓库 git commit -m “注释语句” 第七步：将本地的仓库关联到GitHub，后面的https改成刚刚自己的地址，上面的红框处 git remote add origin git@github.com:xujieyun/save.git 第八步：上传github之前pull一下 git pull origin master 第九步：上传代码到GitHub远程仓库 git push -u origin master 中间可能会让你输入Username和Password，你只要输入github的账号和密码就行了。执行完后，如果没有异常，等待执行完就上传成功了。更新代码第一步：查看当前的git仓库状态，可以使用git status git status 第二步：更新全部 git add * 第三步：接着输入git commit -m “更新说明” git commit -m “更新说明” 第四步：先git pull,拉取当前分支最新代码 git pull 第五步：push到远程master分支上 git push origin master 不出意外，打开GitHub已经同步了 其他指令：查看本地分支 git branch查看远程仓库 git remote查看远程仓库信息 git remote show origin(对应名称)","categories":[],"tags":[]},{"title":"test","slug":"test","date":"2018-08-30T15:20:36.000Z","updated":"2018-08-30T15:20:36.718Z","comments":true,"path":"2018/08/30/test/","link":"","permalink":"xujieyun.com/2018/08/30/test/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"百思不得其姐","slug":"joke1","date":"2018-08-27T17:44:14.000Z","updated":"2018-08-27T18:02:52.248Z","comments":true,"path":"2018/08/28/joke1/","link":"","permalink":"xujieyun.com/2018/08/28/joke1/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Storage 进行页面缓存","slug":"Storage","date":"2018-08-27T17:04:06.000Z","updated":"2018-08-27T18:06:07.578Z","comments":true,"path":"2018/08/28/Storage/","link":"","permalink":"xujieyun.com/2018/08/28/Storage/","excerpt":"","text":"sessionStorage 属性允许你访问一个 session Storage 对象。它与 localStorage 相似，不同之处在于 localStorage 里面存储的数据没有过期时间设置，而存储在 sessionStorage 里面的数据在页面会话结束时会被清除。页面会话在浏览器打开期间一直保持，并且重新加载或恢复页面仍会保持原来的页面会话。在新标签或窗口打开一个页面会初始化一个新的会话，这点和 session cookies 的运行方式不同。应该注意的是，无论是 localStorage 还是 sessionStorage 中保存的数据都仅限于该页面的协议。1234567891011// 保存数据到sessionStoragesessionStorage.setItem('key', 'value');// 从sessionStorage获取数据var data = sessionStorage.getItem('key');// 从sessionStorage删除保存的数据sessionStorage.removeItem('key');// 从sessionStorage删除所有保存的数据sessionStorage.clear();","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-08-24T11:24:45.466Z","updated":"2018-08-24T11:24:45.466Z","comments":true,"path":"2018/08/24/hello-world/","link":"","permalink":"xujieyun.com/2018/08/24/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}